// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApplication.Classes;

#nullable disable

namespace TestApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241020075316_storyAdded")]
    partial class storyAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestApplication.Models.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("TestApplication.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<int?>("CounterId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("TestApplication.Models.Counter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextCheckDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId")
                        .IsUnique()
                        .HasFilter("[ApartmentId] IS NOT NULL");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("TestApplication.Models.CounterReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CounterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfReading")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CounterId");

                    b.ToTable("CounterReadings");
                });

            modelBuilder.Entity("TestApplication.Models.CounterStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("CounterFromID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CounterToID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("CounterFromID");

                    b.HasIndex("CounterToID");

                    b.ToTable("CounterStory");
                });

            modelBuilder.Entity("TestApplication.Models.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("TestApplication.Models.Adress", b =>
                {
                    b.HasOne("TestApplication.Models.Street", "Street")
                        .WithMany("Houses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("TestApplication.Models.Apartment", b =>
                {
                    b.HasOne("TestApplication.Models.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("TestApplication.Models.Counter", b =>
                {
                    b.HasOne("TestApplication.Models.Apartment", "Apartment")
                        .WithOne("Counter")
                        .HasForeignKey("TestApplication.Models.Counter", "ApartmentId");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("TestApplication.Models.CounterReading", b =>
                {
                    b.HasOne("TestApplication.Models.Counter", "Counter")
                        .WithMany("CounterReadings")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counter");
                });

            modelBuilder.Entity("TestApplication.Models.CounterStory", b =>
                {
                    b.HasOne("TestApplication.Models.Apartment", "Apartment")
                        .WithMany("CounterStory")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApplication.Models.Counter", "CounterFrom")
                        .WithMany()
                        .HasForeignKey("CounterFromID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApplication.Models.Counter", "CounterTo")
                        .WithMany()
                        .HasForeignKey("CounterToID");

                    b.Navigation("Apartment");

                    b.Navigation("CounterFrom");

                    b.Navigation("CounterTo");
                });

            modelBuilder.Entity("TestApplication.Models.Apartment", b =>
                {
                    b.Navigation("Counter");

                    b.Navigation("CounterStory");
                });

            modelBuilder.Entity("TestApplication.Models.Counter", b =>
                {
                    b.Navigation("CounterReadings");
                });

            modelBuilder.Entity("TestApplication.Models.Street", b =>
                {
                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
